Лабораторная №4

Наиболее подходящая модель жизненного цикла - спиральная модель.
Спиральная модель позволяет разработку ПО в несколько итераций, что дает возможность быстро демонстрировать пользователям рабочие прототипы и получать обратную связь. Это особенно важно для библиотек, где требования могут изменяться в зависимости от потребностей пользователей.
Модель ЖЦ с промежуточным контролем является подходящей для разработки ПО библиотеки благодаря своей гибкости, возможности управления изменениями и снижению рисков. Она позволяет команде разработки эффективно реагировать на возникающие проблемы и улучшать качество конечного продукта через регулярные проверки и корректировки.
Для ПО библиотеки наиболее подходящими являются спиральная модель и модель с промежуточным контролем. Обе модели обеспечивают гибкость, возможность адаптации к изменениям и управление рисками, что критически важно в условиях динамично меняющихся требований пользователей.

Этапы выполнения проекта в соответствии с ЖЦ
Этап 1: Планирование проекта:
   - Определение требований к программному обеспечению 
ввод адреса библиотеки
регистрация пользователя
выдача электронного читательского билета
регистрация библиотечного фонда на приход, списание книги из библиотечного фонда
регистрация выдачи и приема книжных экземпляров с использованием штрих-кодирования
создание списка пользователей библиотеки и их электронных читательских билетов
предоставление возможности поиска и заказа/бронирования книги
обеспечение покупки книги из резерва списанных книг для продажи
   - Разработка плана работ и расписания

Результат: Техническое задание.

Этап 2: Анализ и проектирование:
Создание структуры базы данных для хранения информации о пользователях, книгах, операциях выдачи/приема книг
Проектирование интерфейса программы для удобства пользователя
Разработка алгоритмов для регистрации пользователей, выдачи книг, поиска книг и т.д.


Результат: Диаграммы архитектуры сайта, определение интерфейсов модулей

Этап 3: Разработка и тестирование прототипа:
Создание прототипа программы, реализующей основные функции (ввод адреса библиотеки, регистрация пользователя, выдача электронного читательского билета и т.д.)
Тестирование прототипа на соответствие требованиям

Этап 4: Реализация и тестирование:
Написание кода программы на основе прототипа
Тестирование программы на работоспособность, корректность работы функций и удобство использования

Этап 5: Тестирование системы:
Проведение комплексного тестирования системы на всех этапах жизненного цикла


Этап 6: Внедрение и поддержка:
Внедрение программного обеспечения в библиотеку
Подготовка персонала к работе с программой
Поддержка и обновление программного обеспечения.



Questions
1.Какие виды жизненного цикла программного обеспечения вы знаете?

Жизненным циклом программного обеспечения называют период от момента появления идеи создания некоторого программного обеспечения до момента завершения его поддержки фирмой-разработчиком или фирмой, выполнявшей сопровождение. В ходе жизненного цикла ПО проходит через анализ предметной области, сбор требований, проектирование, кодирование, тестирование, сопровождение и др.

Каскадная (водопадная) модель ЖЦ. 
Эта модель предполагает последовательное выполнение различных видов деятельности, начиная с выработки требований и заканчивая сопровождением, с четким определением границ между этапами. При этом предполагается, что переход на следующую стадию осуществляется после того, как полностью будут завершены проектные операции предыдущей стадии и получены все исходные данные для следующей стадии. 
Работать в соответствии с этой моделью можно, только если удается предвидеть заранее возможные перипетии хода проекта и тщательно собирать и интегрировать информацию на первых этапах, с тем, чтобы впоследствии можно было пользоваться их результатами без оглядки на возможные изменения. 
Достоинствами такой схемы являются:
-получение в конце каждой стадии законченного набора проектной документации, отвечающего требованиям полноты и согласованности;
-простота планирования процесса разработки.


Модель с промежуточным контролем — разработка ПО ведется итерациями с циклами обратной связи между этапами. Межэтапные корректировки позволяют уменьшить трудоемкость процесса разработки по сравнению с каскадной моделью, но время жизни каждого из этапов растягивается на весь период разработки.


Итеративная или инкрементная модель ЖЦ. 
Инкрементная модель объединяет элементы последовательной модели с итерационной философией макетирования и предполагает разбиение создаваемой системы на набор кусков, которые разрабатываются с помощью нескольких последовательных проходов всех работ или их части. 
На каждой итерации можно анализировать промежуточные результаты исполнения проекта и реакцию на них всех заинтересованных лиц, включая пользователей, и вносить корректирующие изменения на следующих итерациях. Каждая итерация может содержать полный набор видов деятельности от анализа требований, до ввода в эксплуатацию очередной части ПО.
Итеративный процесс предполагает, что разные виды деятельности не привязаны к определенным этапам разработки, а выполняются по мере необходимости, иногда повторяются, до тех пор, пока не будет получен нужный результат. 
Причем, уже самая первая итерация модели позволяет получить базовый продукт - прототип - действующий программный продукт, реализующий отдельные функции и внешние интерфейсы разрабатываемого программного обеспечения (при этом вспомогательные требования остаются нереализованными). План следующей итерации предусматривает модификацию базового продукта, обеспечивающую дополнительные характеристики и функциональность. 
При использовании итеративного подхода значительно сложнее становится адекватно оценить текущее состояние проекта и спланировать долгосрочное развитие событий, а также предсказать сроки и ресурсы, необходимые для обеспечения определенного качества результата. 


V-образная модель жизненного цикла ПО. Основной принцип V-образной модели заключается в том, что детализация проекта возрастает при движении слева направо, одновременно с течением времени, и ни то, ни другое не может повернуть вспять. 
V-образная модель — вариация каскадной модели, в которой задачи разработки идут сверху вниз по левой стороне буквы V, а задачи тестирования — вверх по правой стороне буквы V. Внутри V проводятся горизонтальные линии, показывающие, как результаты каждой из фаз разработки влияют на развитие системы тестирования на каждой из фаз тестирования. 
Модель базируется на том, что приёмо-сдаточные испытания основываются, прежде всего, на требованиях, системное тестирование — на требованиях и архитектуре, комплексное тестирование — на требованиях, архитектуре и интерфейсах, а компонентное тестирование — на требованиях, архитектуре, интерфейсах и алгоритмах.
V-образная модель обеспечивает поддержку в планировании и реализации проекта. В ходе проекта ставятся следующие задачи:
Минимизация рисков: делает проект более прозрачным и повышает качество контроля проекта путём стандартизации промежуточных целей и описания соответствующих им результатов и ответственных лиц.
Повышение и гарантии качества:  промежуточные результаты могут быть проверены на ранних стадиях. Универсальное документирование облегчает читаемость, понятность и проверяемость.
Уменьшение общей стоимости проекта: необходимые ресурсы на разработку, производство, управление и поддержку могут быть заранее просчитаны, спрогнозированы и проконтролированы. 
Повышение качества коммуникации между участниками проекта: универсальное описание всех элементов и условий облегчает взаимопонимание всех участников проекта - пользователей, покупателей, поставщиков и разработчиков.
V-образная модель не универсальна и имеет ряд недостатков:
•не предусматривает работу с параллельными событиями;
• не предусмотрено внесение требования динамических изменений на разных этапах жизненного цикла;
•тестирование требований в жизненном цикле происходит слишком поздно - невозможно внести изменения, не повлияв при этом на график выполнения проекта;
•в модель не входит анализ рисков;
•некоторые результаты можно получить только при достижении низа буквы V. 


Спиральная модель жизненного цикла ПО. Она предлагает каждую итерацию начинать с выделения целей и планирования очередной итерации, определения основных альтернатив и ограничений при ее выполнении, их оценки, а также оценки возникающих рисков и определения способов избавления от них, а заканчивать итерацию оценкой результатов проведенных в ее рамках работ.
Основным ее новым элементом является общая структура действий на каждой итерации — планирование, определение задач, ограничений и вариантов решений, оценка предложенных решений и рисков, выполнение основных работ итерации и оценка их результатов.
Модель базируется на лучших свойствах итеративного жизненного цикла и к которым добавляется новый элемент – анализ риска, отсутствующий в этих парадигмах. Модель определяет четыре действия, представляемые четырьмя квадрантами спирали (по порядку, начиная из верхнего левого угла):
Планирование – определение целей, задач вариантов и ограничений.
Анализ риска – анализ вариантов и распознавание/выбор риска.
Конструирование – разработка продукта первого (следующего) уровня.
Оценивание – оценка заказчиком текущих результатов, планирование следующих итераций или отказ от продолжения модификации ПО.
С каждой итерацией по спирали строятся все более полные версии ПО. На первом витке спирали определяются начальные цели, варианты и ограничения, распознается и анализируется риск. Если анализ риска показывает неопределенность требований, на помощь разработчику и заказчику приходит моделирование. Заказчик оценивает инженерную (конструкторскую) работу и вносит предложения по модификации (квадрант оценки заказчиком). Следующая фаза планирования и анализа риска базируется на предложениях заказчика. В каждом цикле по спирали результаты анализа риска формируются в виде "продолжать, не продолжать".
Основным достоинством данной схемы является то, что, начиная с некоторой итерации, на которой обеспечена определенная функциональная полнота, продукт можно предоставлять пользователю, что позволяет:
• сократить время до появления первых версий программного продукта;
• заинтересовать большое количество пользователей, обеспечивая быстрое продвижение следующих версий продукта на рынке;
• ускорить формирование и уточнение изменений за счет появления практики использования продукта;
Основная проблема использования спиральной схемы - определение момента перехода на следующий виток разработки.


Каскадная (водопадная) модель. Модель представляет собой линейный и последовательный процесс, где каждый этап должен быть завершен перед переходом к следующему. Этапы включают анализ требований, проектирование, реализацию, тестирование и поддержку.
Модель с промежуточным контролем. Это разновидность каскадной модели, которая включает циклы обратной связи между этапами. Позволяет вносить изменения и корректировки на каждом этапе.
Итеративная или инкрементная модель ЖЦ. Процесс разбивается на небольшие итерации, каждая из которых включает все стадии разработки. После каждой итерации создается рабочая версия продукта, которая может быть улучшена в следующих итерациях.
V-образная модель жизненного цикла ПО. Эта модель расширяет каскадную, добавляя этапы верификации и валидации. Каждый этап разработки соответствует тестированию на следующем уровне.
Спиральная модель жизненного цикла ПО. Модель сочетает элементы каскадной и итеративной моделей, акцентируя внимание на анализе рисков и постепенном уточнении требований через итерации. Каждый виток спирали включает планирование, анализ рисков, разработку и тестирование.


2
Существует набор стандартов, определяющих различные элементы в структуре
жизненных циклов ПО и программно-аппаратных систем. В качестве основных таких элементов выделяют технологические процессы — структурированные наборы деятельностей, решающих некоторую общую задачу или связанную совокупность задач, такие, как процесс сопровождения ПО, процесс обеспечения качества, процесс разработки документации и пр. Процессы могут определять разные этапы жизненного цикла и увязывать их с различными видами деятельностей, артефактами и ролями заинтересованных лиц. Процессы могут разбиваться на подпроцессы, решающие частные подзадачи той задачи, с которой работает общий процесс.

3
Основные отличия между ГОСТР ИСО/МЭК 12207-2010 и ГОСТ 19.102-77 следующие:

- ГОСТР ИСО/МЭК 12207-2010 является международным стандартом, который устанавливает требования к процессам жизненного цикла программного обеспечения, в то время как ГОСТ 19.102-77 является отечественным стандартом и устанавливает требования к процессам разработки программных средств.
- ГОСТР ИСО/МЭК 12207-2010 охватывает все этапы жизненного цикла ПО, включая планирование, разработку, тестирование, поставку, эксплуатацию и обслуживание, в то время как ГОСТ 19.102-77 сконцентрирован на процессах разработки.
- ГОСТР ИСО/МЭК 12207-2010 включает в себя международно признанные лучшие практики и принят во многих странах, тогда как ГОСТ 19.102-77 имеет ограниченное применение и ориентирован на российский рынок.
